---
apiVersion: karpenter.sh/v1beta1
kind: NodePool # Previously kind: Provisioner
metadata:
  name: spark-celeborn-worker
  namespace: karpenter # Same namespace as Karpenter add-on installed
spec:
  template:
    metadata:
      labels:
        type: karpenter
        provisioner: spark-celeborn-worker
        NodeGroupType: CelebornWorker
    spec:
      nodeClassRef:
        name: celeborn-worker
      requirements:
        - key: "topology.kubernetes.io/zone"
          operator: In
          values: [${azs}a] #Update the correct region and zones
        - key: "karpenter.sh/capacity-type"
          operator: In
          values: ["on-demand"]
        - key: "kubernetes.io/arch"
          operator: In
          values: ["amd64"]
        - key: "node.kubernetes.io/instance-type"
          operator: In
          values: ["i3en.2xlarge"]
  limits:
    cpu: 1000
  disruption:
    # Describes which types of Nodes Karpenter should consider for consolidation
    # If using 'WhenUnderutilized', Karpenter will consider all nodes for consolidation and attempt to remove or replace Nodes when it discovers that the Node is underutilized and could be changed to reduce cost
    # If using `WhenEmpty`, Karpenter will only consider nodes for consolidation that contain no workload pods
    consolidationPolicy: WhenEmpty
    # The amount of time Karpenter should wait after discovering a consolidation decision
    # This value can currently only be set when the consolidationPolicy is 'WhenEmpty'
    # You can choose to disable consolidation entirely by setting the string value 'Never' here
    consolidateAfter: 30s
    # The amount of time a Node can live on the cluster before being removed
    # Avoiding long-running Nodes helps to reduce security vulnerabilities as well as to reduce the chance of issues that can plague Nodes with long uptimes such as file fragmentation or memory leaks from system processes
    # You can choose to disable expiration entirely by setting the string value 'Never' here
    expireAfter: 720h

  # Priority given to the NodePool when the scheduler considers which NodePool
  # to select. Higher weights indicate higher priority when comparing NodePools.
  # Specifying no weight is equivalent to specifying a weight of 0.
  weight: 10
---
apiVersion: karpenter.k8s.aws/v1beta1
kind: EC2NodeClass
metadata:
  name: celeborn-worker
spec:
  amiFamily: AL2
  blockDeviceMappings:
  - deviceName: /dev/xvda
    ebs:
      deleteOnTermination: true
      encrypted: true
      volumeSize: 100Gi
      volumeType: gp3
  metadataOptions:
    httpEndpoint: enabled
    httpProtocolIPv6: disabled
    httpPutResponseHopLimit: 2
    httpTokens: required
  role: "${eks_cluster_id}-karpenter-node"
  securityGroupSelectorTerms:
  - name: "${eks_cluster_id}-node*"
  subnetSelectorTerms:
  - tags:
      Name: "${eks_cluster_id}-private*"
  tags:
    InstanceType: celeborn-worker
  userData: |
    MIME-Version: 1.0
    Content-Type: multipart/mixed; boundary="BOUNDARY"

    --BOUNDARY
    Content-Type: text/x-shellscript; charset="us-ascii"

    #!/bin/bash
    yum install -y nvme-cli
    mount_location="/mnt"
    mkdir -p $mount_location
    # Get list of EBS Drives
    devices=$(sudo nvme list | grep 'Amazon EC2 NVMe Instance Storage' | awk '{ print $1 }')
    idx=1
    for dev in $devices
    do
      sudo mkfs.xfs $${dev}
      sudo mkdir -p $${mount_location}/disk$${idx}
      echo $${dev} $${mount_location}/disk$${idx} xfs defaults,noatime 1 2 >> /etc/fstab
      idx=$(($${idx} + 1))
    done
    sudo mount -a

    --BOUNDARY--